name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed

permissions:
  actions: read
  contents: read

  
jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download model artifacts from CI
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ci.yml
          workflow_conclusion: success
          run_id: ${{ github.event.workflow_run.id }}
          name: models
          path: ./models
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_artifacts: true

      - name: Download MLFlow artifacts from CI
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ci.yml
          workflow_conclusion: success
          run_id: ${{ github.event.workflow_run.id }}
          name: mlruns
          path: ./mlruns
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_artifacts: true

      - name: Setup Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build and run containers
        run: |
          docker compose up -d --build
          sleep 15

      - name: Download and set up Ngrok
        run: |
          wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-stable-linux-amd64.zip
          unzip ngrok-stable-linux-amd64.zip
          sudo mv ngrok /usr/local/bin
          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

      - name: Start Ngrok tunnel for Nginx
        run: |
          nohup ngrok http 80 > ngrok_nginx.log &
          sleep 10

      - name: Show public URL
        run: |
          curl http://localhost:4040/api/tunnels > tunnels.json
          echo "Public URL for Nginx:"
          NGROK_NGINX_URL=$(cat tunnels.json | jq -r '.tunnels[] | select(.proto == "https" and .config.addr == "http://localhost:80") | .public_url')
          echo $NGROK_NGINX_URL
          echo "NGROK_URL=$NGROK_NGINX_URL" >> $GITHUB_ENV

      - name: Inject Ngrok URL into React
        run: |
          echo "REACT_APP_API_URL=${{ env.NGROK_URL }}" > ui/.env
          cat ui/.env

      - name: Rebuild React container with Ngrok URL
        run: |
          docker compose build react-ui
          docker compose up -d react-ui

      - name: Test React service directly after rebuild
        run: |
          echo "Testing React service directly after rebuild..."
          docker exec react_ui curl -s http://localhost:3000/ || echo "React service test failed after rebuild"

      - name: Test application via Ngrok
        run: |
          echo "Testing application via Ngrok..."
          curl -v ${{ env.NGROK_URL }} || echo "Failed to access application via Ngrok"

      - name: Keep Ngrok running for testing
        run: |
          echo "Ngrok tunnel is active. Access URL above for manual testing."
          sleep 400

      - name: Stop Ngrok
        run: pkill ngrok