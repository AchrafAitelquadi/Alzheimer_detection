name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed

permissions:
  actions: read
  contents: read

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      # Checkout du code
      - name: Checkout code
        uses: actions/checkout@v4  # Mise à jour vers une version plus récente

      # Télécharger les artifacts du modèle depuis CI
      - name: Download model artifacts from CI
        uses: dawidd6/action-download-artifact@v3  # Mise à jour vers une version plus récente
        with:
          workflow: ci.yml
          workflow_conclusion: success
          run_id: ${{ github.event.workflow_run.id }}
          name: models
          path: ./models
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_artifacts: true

      # Télécharger les artifacts MLflow depuis CI
      - name: Download MLflow artifacts from CI
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: ci.yml
          workflow_conclusion: success
          run_id: ${{ github.event.workflow_run.id }}
          name: mlruns
          path: ./mlruns
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_artifacts: true

      # Configurer Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3  # Mise à jour vers une version plus récente

      # Installer Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Construire les conteneurs (sans démarrer encore)
      - name: Build containers
        run: |
          docker compose build

      # Installer Ngrok
      - name: Install Ngrok
        run: |
          wget https://bin.equinox.io/c/bNyj1mQVH4I/ngrok-v3-stable-linux-amd64.zip
          unzip ngrok-v3-stable-linux-amd64.zip
          sudo mv ngrok /usr/local/bin
          ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

      # Lancer Ngrok pour exposer l'application
      - name: Start Ngrok tunnel for Nginx
        run: |
          nohup ngrok http 80 --log=stdout > ngrok.log &
          sleep 10
          NGROK_URL=$(cat ngrok.log | grep -o "https://[0-9a-z]*\.ngrok\.io")
          if [ -z "$NGROK_URL" ]; then
            echo "Erreur : Impossible de récupérer l'URL Ngrok"
            cat ngrok.log
            exit 1
          fi
          echo "Ngrok URL: $NGROK_URL"
          echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV

      # Dépannage : Vérifier l'état du tunnel Ngrok
      - name: Debug Ngrok tunnel status
        run: |
          echo "Détails du tunnel Ngrok :"
          curl http://localhost:4040/api/tunnels || echo "Impossible de contacter l'API Ngrok"

      # Créer un fichier .env pour React avec l'URL Ngrok
      - name: Inject Ngrok URL into React
        run: |
          echo "REACT_APP_API_URL=${{ env.NGROK_URL }}" > ui/.env
          cat ui/.env  # Vérifier le contenu du fichier .env

      # Reconstruire l'image React avec la nouvelle URL
      - name: Rebuild React container with Ngrok URL
        run: |
          docker compose build react-ui

      # Démarrer les conteneurs
      - name: Start containers
        run: |
          docker compose up -d
          sleep 15

      # Afficher les conteneurs en cours d'exécution
      - name: List running containers
        run: |
          echo "Conteneurs en cours d'exécution :"
          docker ps

      # Vérifier les logs des conteneurs
      - name: Show FastAPI container logs
        run: |
          echo "Logs FastAPI :"
          docker logs fastapi_app || echo "Impossible d'obtenir les logs FastAPI"

      - name: Show MLflow container logs
        run: |
          echo "Logs MLflow :"
          docker logs mlflow_ui || echo "Impossible d'obtenir les logs MLflow"

      - name: Show Nginx container logs
        run: |
          echo "Logs Nginx :"
          docker logs reverse_proxy || echo "Impossible d'obtenir les logs Nginx"

      - name: Show React container logs
        run: |
          echo "Logs React :"
          docker logs react_ui || echo "Impossible d'obtenir les logs React"

      # Inspecter les systèmes de fichiers des conteneurs
      - name: Inspect FastAPI container filesystem
        run: |
          echo "Répertoire courant dans le conteneur FastAPI :"
          docker exec fastapi_app pwd || echo "Impossible d'inspecter le conteneur FastAPI"
          echo "Contenu de /app dans FastAPI :"
          docker exec fastapi_app ls -lah /app || echo "Impossible de lister /app"
          echo "Contenu de /app/models dans FastAPI :"
          docker exec fastapi_app ls -lah /app/models || echo "Aucun répertoire models"

      - name: Inspect MLflow container filesystem
        run: |
          echo "Répertoire courant dans le conteneur MLflow :"
          docker exec mlflow_ui pwd || echo "Impossible d'inspecter le conteneur MLflow"
          echo "Contenu de /mlruns dans MLflow :"
          docker exec mlflow_ui ls -lah /mlruns || echo "Aucun répertoire mlruns"

      - name: Inspect Nginx container filesystem
        run: |
          echo "Répertoire courant dans le conteneur Nginx :"
          docker exec reverse_proxy pwd || echo "Impossible d'inspecter le conteneur Nginx"
          echo "Contenu de /etc/nginx dans Nginx :"
          docker exec reverse_proxy ls -lah /etc/nginx || echo "Impossible de lister /etc/nginx"

      - name: Inspect React container filesystem
        run: |
          echo "Répertoire courant dans le conteneur React :"
          docker exec react_ui pwd || echo "Impossible d'inspecter le conteneur React"
          echo "Contenu de /app dans React :"
          docker exec react_ui ls -lah /app || echo "Impossible de lister /app"

      # Tests de connectivité internes
      - name: Test FastAPI internally
        run: |
          echo "Test interne FastAPI :"
          docker exec fastapi_app curl -s http://localhost:8000/ || echo "Test interne FastAPI échoué"

      - name: Test MLflow internally
        run: |
          echo "Test interne MLflow :"
          docker exec mlflow_ui curl -s -I http://localhost:5000/ || echo "Test interne MLflow échoué"

      - name: Test FastAPI connectivity from Nginx
        run: |
          echo "Test de connectivité FastAPI depuis Nginx :"
          docker exec reverse_proxy curl -s http://fastapi:8000/ || echo "Connectivité FastAPI depuis Nginx échouée"

      - name: Test MLflow connectivity from Nginx
        run: |
          echo "Test de connectivité MLflow depuis Nginx :"
          docker exec reverse_proxy curl -s -I http://mlflow:5000/ || echo "Connectivité MLflow depuis Nginx échouée"

      # Test externe via l'URL Ngrok
      - name: Test application via Ngrok
        run: |
          echo "Test de l'application via Ngrok :"
          curl -v ${{ env.NGROK_URL }} || echo "Impossible d'accéder à l'application via Ngrok"
          curl -v ${{ env.NGROK_URL }}/predict --form file=@./test_image.jpg || echo "Test de l'endpoint predict échoué"

      # Garder le tunnel ouvert pour des tests manuels
      - name: Keep Ngrok running for manual testing
        run: |
          echo "Tunnel Ngrok actif. URL publique : ${{ env.NGROK_URL }}"
          sleep 300  # Garde le tunnel ouvert pendant 5 minutes

      # Nettoyer après le test
      - name: Stop containers and Ngrok
        if: always()
        run: |
          docker compose down
          pkill ngrok || echo "Aucun processus Ngrok à arrêter"